from Crypto.Util.number import *

M = 54354118932293738974277735009690054672438569183669264435593776508452144737651
X0 = 27562969846242726464849700066934036402432300755063353950289314180737804494366
X1 = 53881790667921922669270635160364649792695336386197364717009941696103524473701
X2 = 18353049655762832365359178635985811169156727614439565352194778213695599906765

class LCG:
    def __init__(self):
        self.A = 3888188529568654032289763479153589114108256385402749337961355305249441503481
        self.B = 39846490493920068598077178114888801382526803639516069440643562985086349730290
        self.M = 54354118932293738974277735009690054672438569183669264435593776508452144737651
        self.x = 27562969846242726464849700066934036402432300755063353950289314180737804494366
            
    def next(self):
        self.x = ((self.A * self.x) + self.B) % self.M
        return self.x

A = (X2 - X1) * inverse(X1 - X0, M) % M
print(A)
B = X1 - (A*X0 % M)
print(B)

lcg = LCG()
assert X1 == (A*X0 + B) % M
assert X2 == (A*X1 + B) % M
print("-*-*-*-")

for i in range(99):
    x = lcg.next()

print(x)
