

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_73542616560647877565544036788738025202939381425158737721544398356851787401183516163221837013929559568993844046804187977705376289108065126883603562904941748653607836358267359664041064708762154474786168204628181667371305788303624396903323216279110685399145476916585122917284319282272004045859138239853037072761 = Integer(73542616560647877565544036788738025202939381425158737721544398356851787401183516163221837013929559568993844046804187977705376289108065126883603562904941748653607836358267359664041064708762154474786168204628181667371305788303624396903323216279110685399145476916585122917284319282272004045859138239853037072761); _sage_const_2657054880167593054409755786316190176139048369036893368834913798649283717358246457720021168590230987384201961744917278479195838455294205306264398417522071058105245210332964380113841646083317786151272874874267948107036095666198197073147087762030842808562672646078089825632314457231611278451324232095496184838 = Integer(2657054880167593054409755786316190176139048369036893368834913798649283717358246457720021168590230987384201961744917278479195838455294205306264398417522071058105245210332964380113841646083317786151272874874267948107036095666198197073147087762030842808562672646078089825632314457231611278451324232095496184838); _sage_const_108294440701045353595867242719660522374526250640690193563048263854806748525172379331 = Integer(108294440701045353595867242719660522374526250640690193563048263854806748525172379331); _sage_const_10 = Integer(10); _sage_const_71 = Integer(71); _sage_const_30 = Integer(30); _sage_const_341078269246532299656864881223 = Integer(341078269246532299656864881223); _sage_const_41 = Integer(41); _sage_const_155 = Integer(155); _sage_const_0 = Integer(0); _sage_const_65537 = Integer(65537); _sage_const_1 = Integer(1)
from Crypto.Util.number import *

n = _sage_const_73542616560647877565544036788738025202939381425158737721544398356851787401183516163221837013929559568993844046804187977705376289108065126883603562904941748653607836358267359664041064708762154474786168204628181667371305788303624396903323216279110685399145476916585122917284319282272004045859138239853037072761 
cipher = _sage_const_2657054880167593054409755786316190176139048369036893368834913798649283717358246457720021168590230987384201961744917278479195838455294205306264398417522071058105245210332964380113841646083317786151272874874267948107036095666198197073147087762030842808562672646078089825632314457231611278451324232095496184838 

P = PolynomialRing(Zmod(n), names=('x',)); (x,) = P._first_ngens(1)
poly = _sage_const_108294440701045353595867242719660522374526250640690193563048263854806748525172379331  * _sage_const_10 **_sage_const_71  + x * _sage_const_10 **_sage_const_30  + _sage_const_341078269246532299656864881223 
f = poly.monic()
d_p = f.small_roots(X=_sage_const_10 **_sage_const_41 , beta=_sage_const_41 /_sage_const_155 )

assert len(d_p)

p = int(poly(d_p[_sage_const_0 ]))
q = n // p
assert p * q == n

e = _sage_const_65537 
phi = (p - _sage_const_1 ) * (q - _sage_const_1 )
d = inverse(e, phi)
m = pow(cipher, d, n)

print(long_to_bytes(m))

