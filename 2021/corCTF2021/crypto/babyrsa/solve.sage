from Crypto.Util.number import *

n = 73542616560647877565544036788738025202939381425158737721544398356851787401183516163221837013929559568993844046804187977705376289108065126883603562904941748653607836358267359664041064708762154474786168204628181667371305788303624396903323216279110685399145476916585122917284319282272004045859138239853037072761
cipher = 2657054880167593054409755786316190176139048369036893368834913798649283717358246457720021168590230987384201961744917278479195838455294205306264398417522071058105245210332964380113841646083317786151272874874267948107036095666198197073147087762030842808562672646078089825632314457231611278451324232095496184838

P.<x> = PolynomialRing(Zmod(n))
poly = 108294440701045353595867242719660522374526250640690193563048263854806748525172379331 * 10^71 + x * 10^30 + 341078269246532299656864881223
f = poly.monic()
d_p = f.small_roots(X=10^41, beta=41/155) # 512bitのp(155桁)のうち41桁が未知

assert len(d_p)

p = int(poly(d_p[0]))
q = n // p
assert p * q == n

e = 65537
phi = (p - 1) * (q - 1)
d = inverse(e, phi)
m = pow(cipher, d, n)

print(long_to_bytes(m))
